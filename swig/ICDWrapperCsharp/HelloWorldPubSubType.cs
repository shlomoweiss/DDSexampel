//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ICDWrapper {

public class HelloWorldPubSubType : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal HelloWorldPubSubType(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HelloWorldPubSubType obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(HelloWorldPubSubType obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~HelloWorldPubSubType() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ICDWrapperPINVOKE.delete_HelloWorldPubSubType(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public HelloWorldPubSubType() : this(ICDWrapperPINVOKE.new_HelloWorldPubSubType(), true) {
  }

  public bool serialize(SWIGTYPE_p_void data, SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t payload, SWIGTYPE_p_eprosima__fastdds__dds__DataRepresentationId_t data_representation) {
    bool ret = ICDWrapperPINVOKE.HelloWorldPubSubType_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t.getCPtr(payload), SWIGTYPE_p_eprosima__fastdds__dds__DataRepresentationId_t.getCPtr(data_representation));
    if (ICDWrapperPINVOKE.SWIGPendingException.Pending) throw ICDWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool deserialize(SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t payload, SWIGTYPE_p_void data) {
    bool ret = ICDWrapperPINVOKE.HelloWorldPubSubType_deserialize(swigCPtr, SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t.getCPtr(payload), SWIGTYPE_p_void.getCPtr(data));
    if (ICDWrapperPINVOKE.SWIGPendingException.Pending) throw ICDWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint calculate_serialized_size(SWIGTYPE_p_void data, SWIGTYPE_p_eprosima__fastdds__dds__DataRepresentationId_t data_representation) {
    uint ret = ICDWrapperPINVOKE.HelloWorldPubSubType_calculate_serialized_size(swigCPtr, SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_eprosima__fastdds__dds__DataRepresentationId_t.getCPtr(data_representation));
    if (ICDWrapperPINVOKE.SWIGPendingException.Pending) throw ICDWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool compute_key(SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t payload, SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t ihandle, bool force_md5) {
    bool ret = ICDWrapperPINVOKE.HelloWorldPubSubType_compute_key__SWIG_0(swigCPtr, SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t.getCPtr(payload), SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t.getCPtr(ihandle), force_md5);
    if (ICDWrapperPINVOKE.SWIGPendingException.Pending) throw ICDWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool compute_key(SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t payload, SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t ihandle) {
    bool ret = ICDWrapperPINVOKE.HelloWorldPubSubType_compute_key__SWIG_1(swigCPtr, SWIGTYPE_p_eprosima__fastdds__rtps__SerializedPayload_t.getCPtr(payload), SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t.getCPtr(ihandle));
    if (ICDWrapperPINVOKE.SWIGPendingException.Pending) throw ICDWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool compute_key(SWIGTYPE_p_void data, SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t ihandle, bool force_md5) {
    bool ret = ICDWrapperPINVOKE.HelloWorldPubSubType_compute_key__SWIG_2(swigCPtr, SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t.getCPtr(ihandle), force_md5);
    if (ICDWrapperPINVOKE.SWIGPendingException.Pending) throw ICDWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool compute_key(SWIGTYPE_p_void data, SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t ihandle) {
    bool ret = ICDWrapperPINVOKE.HelloWorldPubSubType_compute_key__SWIG_3(swigCPtr, SWIGTYPE_p_void.getCPtr(data), SWIGTYPE_p_eprosima__fastdds__rtps__InstanceHandle_t.getCPtr(ihandle));
    if (ICDWrapperPINVOKE.SWIGPendingException.Pending) throw ICDWrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_void create_data() {
    global::System.IntPtr cPtr = ICDWrapperPINVOKE.HelloWorldPubSubType_create_data(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public void delete_data(SWIGTYPE_p_void data) {
    ICDWrapperPINVOKE.HelloWorldPubSubType_delete_data(swigCPtr, SWIGTYPE_p_void.getCPtr(data));
  }

  public void register_type_object_representation() {
    ICDWrapperPINVOKE.HelloWorldPubSubType_register_type_object_representation(swigCPtr);
  }

}

}
