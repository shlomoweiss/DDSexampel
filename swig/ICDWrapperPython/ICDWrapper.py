# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ICDWrapper
else:
    import _ICDWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ICDWrapper.delete_SwigPyIterator

    def value(self):
        return _ICDWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ICDWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ICDWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ICDWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ICDWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ICDWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _ICDWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _ICDWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _ICDWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ICDWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ICDWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ICDWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ICDWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ICDWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ICDWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ICDWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ICDWrapper:
_ICDWrapper.SwigPyIterator_swigregister(SwigPyIterator)
class HelloWorld(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _ICDWrapper.delete_HelloWorld

    def __init__(self, *args):
        _ICDWrapper.HelloWorld_swiginit(self, _ICDWrapper.new_HelloWorld(*args))

    def __eq__(self, x):
        return _ICDWrapper.HelloWorld___eq__(self, x)

    def __ne__(self, x):
        return _ICDWrapper.HelloWorld___ne__(self, x)

    def index(self, *args):
        return _ICDWrapper.HelloWorld_index(self, *args)

    def message(self, *args):
        return _ICDWrapper.HelloWorld_message(self, *args)

# Register HelloWorld in _ICDWrapper:
_ICDWrapper.HelloWorld_swigregister(HelloWorld)
class HelloWorldPubSubType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ICDWrapper.HelloWorldPubSubType_swiginit(self, _ICDWrapper.new_HelloWorldPubSubType())
    __swig_destroy__ = _ICDWrapper.delete_HelloWorldPubSubType

    def serialize(self, data, payload, data_representation):
        return _ICDWrapper.HelloWorldPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _ICDWrapper.HelloWorldPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _ICDWrapper.HelloWorldPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _ICDWrapper.HelloWorldPubSubType_compute_key(self, *args)

    def create_data(self):
        return _ICDWrapper.HelloWorldPubSubType_create_data(self)

    def delete_data(self, data):
        return _ICDWrapper.HelloWorldPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _ICDWrapper.HelloWorldPubSubType_register_type_object_representation(self)

# Register HelloWorldPubSubType in _ICDWrapper:
_ICDWrapper.HelloWorldPubSubType_swigregister(HelloWorldPubSubType)

def register_HelloWorld_type_identifier(type_ids):
    return _ICDWrapper.register_HelloWorld_type_identifier(type_ids)

def serialize_key(scdr, data):
    return _ICDWrapper.serialize_key(scdr, data)

def dds_init(topic_name):
    return _ICDWrapper.dds_init(topic_name)

def dds_init_with_domain(topic_name, domain_id):
    return _ICDWrapper.dds_init_with_domain(topic_name, domain_id)

def dds_write(index, message):
    return _ICDWrapper.dds_write(index, message)

def dds_write_struct(hello_world):
    return _ICDWrapper.dds_write_struct(hello_world)

def dds_take(index_out, message_buffer, buffer_len):
    return _ICDWrapper.dds_take(index_out, message_buffer, buffer_len)

def dds_take_struct(hello_world_out):
    return _ICDWrapper.dds_take_struct(hello_world_out)

def dds_take_message(index_out):
    return _ICDWrapper.dds_take_message(index_out)

def dds_shutdown():
    return _ICDWrapper.dds_shutdown()

def dds_take_string(index_out):
    return _ICDWrapper.dds_take_string(index_out)

cvar = _ICDWrapper.cvar
ICD_pkg_HelloWorld_max_cdr_typesize = cvar.ICD_pkg_HelloWorld_max_cdr_typesize
ICD_pkg_HelloWorld_max_key_cdr_typesize = cvar.ICD_pkg_HelloWorld_max_key_cdr_typesize

